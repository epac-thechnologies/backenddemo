package com.OrdreArchive.Controller;

import com.OrdreArchive.Dao.InvoiceRepository;
import com.OrdreArchive.Dao.OrdreArchiveRepository;
import com.OrdreArchive.Entity.Invoice;
import com.OrdreArchive.Entity.OrdreArchive;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.rest.core.annotation.RestResource;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@RestController
@RestResource
public class InvoiceController {
    @Autowired
    private InvoiceRepository invoiceRepository;
    @Autowired
    private OrdreArchiveRepository ordreArchiveRepository;
    @CrossOrigin("*")
    @PostMapping("/invoice")
    public Invoice addInvoice (@RequestBody Invoice invoice)
    {
        double sum =0;
        //ArrayList<OrdreArchive>list=new ArrayList<>();
        Collection<OrdreArchive>ordreArchives=invoice.getOrdreArchives();

        for (OrdreArchive o:ordreArchives)
        {
           sum =sum+(o.getPrice()*o.getProduced());
        }
        invoice.setType("INVOICE");
        invoice.setSum(sum);
        ArrayList<OrdreArchive>list=new ArrayList<>();
        for (OrdreArchive o:ordreArchives)
        {
            o.setStatus("INVOICED");
            /*Collection<Invoice> col=o.getInvoices();
            col.add(i);
            o.setInvoices(col);

             */
           OrdreArchive or= ordreArchiveRepository.save(o);
           list.add(or);
        }


         invoice.setOrdreArchives(list);
        Invoice i=invoiceRepository.save(invoice);

        return i;
    }
    @CrossOrigin("*")
    @GetMapping("/invoices")
    public List<Invoice> getallInvoices()
    {
        return  invoiceRepository.findAll();
    }
    @CrossOrigin("*")
    @GetMapping("/annulerfacture/{id}")
    public Invoice annulerfacture(@PathVariable("id") final long id)
    {
        Invoice i=invoiceRepository.findByFactureId(id);
        i.setType("AVOIR");
        invoiceRepository.save(i);
        Collection<OrdreArchive>o=i.getOrdreArchives();
        for (OrdreArchive or:o)
        {
            or.setStatus("DELIVRED");
            ordreArchiveRepository.save(or);
        }
    return  i;
    }


}
